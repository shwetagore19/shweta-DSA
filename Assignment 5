#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

struct Node* createNode(int data) {

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }

    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

void preorder(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

void postorder(struct Node* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

int main() {
    struct Node* root = createNode(9);
    root->left = createNode(28);
    root->right = createNode(05);
    root->left->left = createNode(58);
    root->left->right = createNode(19);

    printf("Binary Tree Traversal Demonstration:\n");
    printf("----------------------------------\n");

    printf("Inorder Traversal (Left -> Root -> Right): \n");
    inorder(root);
    printf("\n");

    printf("Preorder Traversal (Root -> Left -> Right): \n");
    preorder(root);
    printf("\n");

    printf("Postorder Traversal (Left -> Right -> Root): \n");
    postorder(root);
    printf("\n");
    return 0;
}
